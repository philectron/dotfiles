# Uncrustify-0.66.1-2-f9c285db

#
# General options
#

# The type of line endings. Default=Auto.
newlines                        = lf       # auto/lf/crlf/cr

# Control what to do with the UTF-8 BOM (recommend 'remove').
utf8_bom                        = remove   # ignore/add/remove/force

# Force the output encoding to UTF-8.
utf8_force                      = true     # false/true

#
# Spacing options
#

# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
# also '>>>' '<<' '>>' '%' '|'.
sp_arith                        = force    # ignore/add/remove/force

# Add or remove space around assignment operator '=', '+=', etc.
sp_assign                       = force    # ignore/add/remove/force

# Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign.
sp_cpp_lambda_assign            = remove   # ignore/add/remove/force

# Add or remove space after the capture specification in C++11 lambda.
sp_cpp_lambda_paren             = remove   # ignore/add/remove/force

# Add or remove space around assignment operator '=' in a prototype.
sp_assign_default               = force    # ignore/add/remove/force

# Add or remove space around assignment '=' in enum.
sp_enum_assign                  = force    # ignore/add/remove/force

# Add or remove space around assignment ':' in enum.
sp_enum_colon                   = remove   # ignore/add/remove/force

# Add or remove space around preprocessor '##' concatenation operator. Default=Add.
sp_pp_concat                    = force    # ignore/add/remove/force

# Add or remove space after preprocessor '#' stringify operator. Also affects the '#@' charizing operator.
sp_pp_stringify                 = force    # ignore/add/remove/force

# Add or remove space around boolean operators '&&' and '||'.
sp_bool                         = force    # ignore/add/remove/force

# Add or remove space around compare operator '<', '>', '==', etc.
sp_compare                      = force    # ignore/add/remove/force

# Add or remove space inside '(' and ')'.
sp_inside_paren                 = remove   # ignore/add/remove/force

# Add or remove space between nested parens: '((' vs ') )'.
sp_paren_paren                  = remove   # ignore/add/remove/force

# Add or remove space between ')' and '{'.
sp_paren_brace                  = force    # ignore/add/remove/force

# Add or remove space before pointer star '*'.
sp_before_ptr_star              = remove   # ignore/add/remove/force

# Add or remove space before pointer star '*' that isn't followed by a variable name
# If set to 'ignore', sp_before_ptr_star is used instead.
sp_before_unnamed_ptr_star      = remove   # ignore/add/remove/force

# Add or remove space between pointer stars '*'.
sp_between_ptr_star             = remove   # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star               = force    # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_after_ptr_star_func          = force    # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by an open paren (function types).
sp_ptr_star_paren               = remove   # ignore/add/remove/force

# Add or remove space before a pointer star '*', if followed by a func proto/def.
sp_before_ptr_star_func         = remove   # ignore/add/remove/force

# Add or remove space before a reference sign '&'.
sp_before_byref                 = remove   # ignore/add/remove/force

# Add or remove space before a reference sign '&' that isn't followed by a variable name.
# If set to 'ignore', sp_before_byref is used instead.
sp_before_unnamed_byref         = remove   # ignore/add/remove/force

# Add or remove space after reference sign '&', if followed by a word.
sp_after_byref                  = force    # ignore/add/remove/force

# Add or remove space after a reference sign '&', if followed by a func proto/def.
sp_after_byref_func             = force    # ignore/add/remove/force

# Add or remove space before a reference sign '&', if followed by a func proto/def.
sp_before_byref_func            = remove   # ignore/add/remove/force

# Add or remove space in 'template <' vs 'template<'.
# If set to ignore, sp_before_angle is used.
sp_template_angle               = force    # ignore/add/remove/force

# Add or remove space before '<>'.
sp_before_angle                 = remove   # ignore/add/remove/force

# Add or remove space inside '<' and '>'.
sp_inside_angle                 = remove   # ignore/add/remove/force

# Add or remove space between '<>' and ':'.
sp_angle_colon                  = force    # ignore/add/remove/force

# Add or remove space after '<>'.
sp_after_angle                  = remove   # ignore/add/remove/force

# Add or remove space between '<>' and '(' as found in 'new List<byte>(foo);'.
sp_angle_paren                  = remove   # ignore/add/remove/force

# Add or remove space between '<>' and '()' as found in 'new List<byte>();'.
sp_angle_paren_empty            = remove   # ignore/add/remove/force

# Add or remove space between '<>' and a word as in 'List<byte> m;' or 'template <typename T> static ...'.
sp_angle_word                   = force    # ignore/add/remove/force

# Add or remove space between '>' and '>' in '>>' (template stuff C++/C# only). Default=Add.
sp_angle_shift                  = remove   # ignore/add/remove/force

# Permit removal of the space between '>>' in 'foo<bar<int> >' (C++11 only). Default=False.
# sp_angle_shift cannot remove the space without this option.
sp_permit_cpp11_shift           = true     # false/true

# Add or remove space before '(' of 'if', 'for', 'switch', 'while', etc.
sp_before_sparen                = force    # ignore/add/remove/force

# Add or remove space inside if-condition '(' and ')'.
sp_inside_sparen                = remove   # ignore/add/remove/force

# Add or remove space after ')' of 'if', 'for', 'switch', and 'while', etc.
sp_after_sparen                 = force    # ignore/add/remove/force

# Add or remove space between ')' and '{' of 'if', 'for', 'switch', and 'while', etc.
sp_sparen_brace                 = force    # ignore/add/remove/force

# Add or remove space before empty statement ';' on 'if', 'for' and 'while'.
sp_special_semi                 = remove   # ignore/add/remove/force

# Add or remove space before ';' in non-empty 'for' statements.
sp_before_semi_for              = remove   # ignore/add/remove/force

# Add or remove space before a semicolon of an empty part of a for statement.
sp_before_semi_for_empty        = force    # ignore/add/remove/force

# Add or remove space after ';', except when followed by a comment. Default=Add.
sp_after_semi                   = force    # ignore/add/remove/force

# Add or remove space after the final semicolon of an empty part of a for statement: for ( ; ; <here> ).
sp_after_semi_for_empty         = remove   # ignore/add/remove/force

# Add or remove space before '[' (except '[]').
sp_before_square                = remove   # ignore/add/remove/force

# Add or remove space before '[]'.
sp_before_squares               = remove   # ignore/add/remove/force

# Add or remove space inside a non-empty '[' and ']'.
sp_inside_square                = remove   # ignore/add/remove/force

# Add or remove space after ',', 'a,b' vs 'a, b'.
sp_after_comma                  = force    # ignore/add/remove/force

# Add or remove space after class ':'.
sp_after_class_colon            = force    # ignore/add/remove/force

# Add or remove space before class ':'.
sp_before_class_colon           = force    # ignore/add/remove/force

# Add or remove space between 'operator' and operator sign.
sp_after_operator               = remove   # ignore/add/remove/force

# Add or remove space between the operator symbol and the open paren, as in 'operator ++('.
sp_after_operator_sym           = remove   # ignore/add/remove/force

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'.
sp_after_cast                   = remove   # ignore/add/remove/force

# Add or remove spaces inside cast parens.
sp_inside_paren_cast            = remove   # ignore/add/remove/force

# Add or remove space between the type and open paren in a C++ cast, i.e. 'int(exp)' vs 'int (exp)'.
sp_cpp_cast_paren               = remove   # ignore/add/remove/force

# Add or remove space between 'sizeof' and '('.
sp_sizeof_paren                 = remove   # ignore/add/remove/force

# Add or remove space inside enum '{' and '}'.
sp_inside_braces_enum           = remove   # ignore/add/remove/force

# Add or remove space inside struct/union '{' and '}'.
sp_inside_braces_struct         = remove   # ignore/add/remove/force

# Add or remove space inside an unnamed temporary direct-list-initialization.
sp_inside_type_brace_init_lst   = remove   # ignore/add/remove/force

# Add or remove space inside '{' and '}'.
sp_inside_braces                = force    # ignore/add/remove/force

# Add or remove space inside '{}'.
sp_inside_braces_empty          = remove   # ignore/add/remove/force

# Add or remove space between return type and function name
# A minimum of 1 is forced except for pointer return types.
sp_type_func                    = force    # ignore/add/remove/force

# Add or remove space between type and open brace of an unnamed temporary direct-list-initialization.
sp_type_brace_init_lst          = force    # ignore/add/remove/force

# Add or remove space between function name and '(' on function declaration.
sp_func_proto_paren             = remove   # ignore/add/remove/force

# Add or remove space between function name and '(' on function definition.
sp_func_def_paren               = remove   # ignore/add/remove/force

# Add or remove space between function name and '()' on function definition without parameters.
sp_func_def_paren_empty         = remove   # ignore/add/remove/force

# Add or remove space inside empty function '()'.
sp_inside_fparens               = remove   # ignore/add/remove/force

# Add or remove space inside function '(' and ')'.
sp_inside_fparen                = remove   # ignore/add/remove/force

# Add or remove space inside the first parens in the function type: 'void (*x)(...)'.
sp_inside_tparen                = remove   # ignore/add/remove/force

# Add or remove space between ']' and '(' when part of a function call.
sp_square_fparen                = remove   # ignore/add/remove/force

# Add or remove space between ')' and '{' of function.
sp_fparen_brace                 = force    # ignore/add/remove/force

# Add or remove space between function name and '(' on function calls.
sp_func_call_paren              = remove   # ignore/add/remove/force

# Add or remove space between the user function name and '(' on function calls
# You need to set a keyword to be a user function, like this: 'set func_call_user _' in the config file.
sp_func_call_user_paren         = remove   # ignore/add/remove/force

# Add or remove space between a constructor/destructor and the open paren.
sp_func_class_paren             = remove   # ignore/add/remove/force

# Add or remove space between 'return' and '('.
sp_return_paren                 = force    # ignore/add/remove/force

# Add or remove space between '__attribute__' and '('.
sp_attribute_paren              = remove   # ignore/add/remove/force

# Add or remove space between 'defined' and '(' in '#if defined (FOO)'.
sp_defined_paren                = remove   # ignore/add/remove/force

# Add or remove space between 'throw' and '(' in 'throw (something)'.
sp_throw_paren                  = remove   # ignore/add/remove/force

# Add or remove space between 'catch' and '(' in 'catch (something) { }'
# If set to ignore, sp_before_sparen is used.
sp_catch_paren                  = force    # ignore/add/remove/force

# Add or remove space between macro and value.
sp_macro                        = force    # ignore/add/remove/force

# Add or remove space between macro function ')' and value.
sp_macro_func                   = remove   # ignore/add/remove/force

# Add or remove space between 'else' and '{' if on the same line.
sp_else_brace                   = force    # ignore/add/remove/force

# Add or remove space between '}' and 'else' if on the same line.
sp_brace_else                   = force    # ignore/add/remove/force

# Add or remove space between '}' and the name of a typedef on the same line.
sp_brace_typedef                = force    # ignore/add/remove/force

# Add or remove space between 'catch' and '{' if on the same line.
sp_catch_brace                  = force    # ignore/add/remove/force

# Add or remove space between '}' and 'catch' if on the same line.
sp_brace_catch                  = force    # ignore/add/remove/force

# Add or remove space between 'finally' and '{' if on the same line.
sp_finally_brace                = force    # ignore/add/remove/force

# Add or remove space between '}' and 'finally' if on the same line.
sp_brace_finally                = force    # ignore/add/remove/force

# Add or remove space between 'try' and '{' if on the same line.
sp_try_brace                    = force    # ignore/add/remove/force

# Add or remove space between get/set and '{' if on the same line.
sp_getset_brace                 = force    # ignore/add/remove/force

# Add or remove space before the '::' operator.
sp_before_dc                    = remove   # ignore/add/remove/force

# Add or remove space after the '::' operator.
sp_after_dc                     = remove   # ignore/add/remove/force

# Add or remove space before a backslash-newline at the end of a line. Default=Add.
sp_before_nl_cont               = remove   # ignore/add/remove/force

# Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'.
sp_after_oc_scope               = remove   # ignore/add/remove/force

# Add or remove space after the colon in message specs
# '-(int) f:(int) x;' vs '-(int) f: (int) x;'.
sp_after_oc_colon               = remove   # ignore/add/remove/force

# Add or remove space before the colon in message specs
# '-(int) f: (int) x;' vs '-(int) f : (int) x;'.
sp_before_oc_colon              = remove   # ignore/add/remove/force

# Add or remove space after the colon in message specs
# '[object setValue:1];' vs '[object setValue: 1];'.
sp_after_send_oc_colon          = force    # ignore/add/remove/force

# Add or remove space before the colon in message specs
# '[object setValue:1];' vs '[object setValue :1];'.
sp_before_send_oc_colon         = remove   # ignore/add/remove/force

# Add or remove space after the (type) in message specs
# '-(int)f: (int) x;' vs '-(int)f: (int)x;'.
sp_after_oc_type                = remove   # ignore/add/remove/force

# Add or remove space around the ':' in 'b ? t : f'.
sp_cond_colon                   = force    # ignore/add/remove/force

# Add or remove space around the '?' in 'b ? t : f'.
sp_cond_question                = force    # ignore/add/remove/force

# Control the space after the opening of a C++ comment '// A' vs '//A'.
sp_cmt_cpp_start                = force    # ignore/add/remove/force

# Controls the spaces between #else or #endif and a trailing comment.
sp_endif_cmt                    = force    # ignore/add/remove/force

# Controls the spaces after 'new', 'delete' and 'delete[]'.
sp_after_new                    = force    # ignore/add/remove/force

# Controls the spaces between new and '(' in 'new()'.
sp_between_new_paren            = remove   # ignore/add/remove/force

# Controls the spaces between ')' and 'type' in 'new(foo) BAR'.
sp_after_newop_paren            = force    # ignore/add/remove/force

# Controls the spaces inside paren of the new operator: 'new(foo) BAR'.
sp_inside_newop_paren           = remove   # ignore/add/remove/force

# Controls the spaces before a trailing or embedded comment.
sp_before_tr_emb_cmt            = force    # ignore/add/remove/force

# Number of spaces before a trailing or embedded comment.
sp_num_before_tr_emb_cmt        = 2        # unsigned number

#
# Indenting
#

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8. Default=8.
indent_columns                  = 4        # unsigned number

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces (default)
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs                = 0        # unsigned number

# Whether to indent strings broken by '\' so that they line up.
indent_align_string             = true     # false/true

# Whether the 'class' body is indented.
indent_class                    = true     # false/true

# Whether to indent the stuff after a leading base class colon.
indent_class_colon              = true     # false/true

# Same as indent_label, but for access specifiers that are followed by a colon. Default=1
indent_access_spec              = -4       # number

#
# Newline adding and removing options
#

# Whether to collapse empty blocks between '{' and '}'.
nl_collapse_empty_body          = true     # false/true

# Don't split one-line braced assignments - 'foo_t f = { 1, 2 };'.
nl_assign_leave_one_liners      = true     # false/true

# Don't split one-line braced statements inside a class xx { } body.
nl_class_leave_one_liners       = true     # false/true

# Don't split one-line enums: 'enum foo { BAR = 15 };'
nl_enum_leave_one_liners        = true     # false/true

# Don't split one-line get or set functions.
nl_getset_leave_one_liners      = true     # false/true

# Don't split one-line function definitions - 'int foo() { return 0; }'.
nl_func_leave_one_liners        = true     # false/true

# Don't split one-line C++11 lambdas - '[]() { return 0; }'.
nl_cpp_lambda_leave_one_liners  = true     # false/true

# Don't split one-line if/else statements - 'if(a) b++;'.
nl_if_leave_one_liners          = true     # false/true

# Don't split one-line while statements - 'while(a) b++;'.
nl_while_leave_one_liners       = true     # false/true

# Don't split one-line OC messages.
nl_oc_msg_leave_one_liner       = true     # false/true

# Add or remove newlines at the start of the file.
nl_start_of_file                = remove   # ignore/add/remove/force

# Add or remove newline at the end of the file.
nl_end_of_file                  = force    # ignore/add/remove/force

# The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force').
nl_end_of_file_min              = 1        # unsigned number

# Add or remove newline between '=' and '{'.
nl_assign_brace                 = remove   # ignore/add/remove/force

# The number of blank lines after a block of variable definitions at the top of a function body
# 0 = No change (default).
nl_func_var_def_blk             = 1        # unsigned number

# Add or remove newline between a function call's ')' and '{', as in:
# list_for_each(item, &list) { }.
nl_fcall_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'enum' and '{'.
nl_enum_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between 'struct and '{'.
nl_struct_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between 'union' and '{'.
nl_union_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'if' and '{'.
nl_if_brace                     = remove   # ignore/add/remove/force

# Add or remove newline between '}' and 'else'.
nl_brace_else                   = remove   # ignore/add/remove/force

# Add or remove newline between 'else if' and '{'
# If set to ignore, nl_if_brace is used instead.
nl_elseif_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between 'else' and '{'.
nl_else_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between 'else' and 'if'.
nl_else_if                      = remove   # ignore/add/remove/force

# Add or remove newline between 'for' and '{'.
nl_for_brace                    = remove   # ignore/add/remove/force

# Add or remove newline between 'while' and '{'.
nl_while_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'using' and '{'.
nl_using_brace                  = remove   # ignore/add/remove/force

# Add or remove newline between 'do' and '{'.
nl_do_brace                     = remove   # ignore/add/remove/force

# Add or remove newline between '}' and 'while' of 'do' statement.
nl_brace_while                  = remove   # ignore/add/remove/force

# Add or remove newline between 'switch' and '{'.
nl_switch_brace                 = remove   # ignore/add/remove/force

# Add or remove newline between 'synchronized' and '{'.
nl_synchronized_brace           = remove   # ignore/add/remove/force

# Newline between namespace and {.
nl_namespace_brace              = remove   # ignore/add/remove/force

# Add or remove newline between 'template<>' and whatever follows.
nl_template_class               = force    # ignore/add/remove/force

# Add or remove newline between 'class' and '{'.
nl_class_brace                  = remove   # ignore/add/remove/force

# Add or remove newline before/after each ',' in the base class list,
#   (tied to pos_class_comma).
nl_class_init_args              = force    # ignore/add/remove/force

# Add or remove newline between a function name and the opening '(' in the declaration.
nl_func_paren                   = remove   # ignore/add/remove/force

# Add or remove newline after '(' in a function declaration.
nl_func_decl_start              = remove   # ignore/add/remove/force

# Add or remove newline before the ')' in a function declaration.
nl_func_decl_end                = remove   # ignore/add/remove/force

# Add or remove newline between '()' in a function declaration.
nl_func_decl_empty              = remove   # ignore/add/remove/force

# Add or remove newline between function signature and '{'.
nl_fdef_brace                   = remove   # ignore/add/remove/force

# Add or remove newline between C++11 lambda signature and '{'.
nl_cpp_ldef_brace               = remove   # ignore/add/remove/force

# Whether to alter newlines in '#define' macros.
nl_define_macro                 = true     # false/true

# Whether to double-space commented-entries in struct/union/enum.
nl_ds_struct_enum_cmt           = true     # false/true

# force nl before } of a struct/union/enum
# (lower priority than 'eat_blanks_before_close_brace').
nl_ds_struct_enum_close_brace   = true     # false/true

# Change simple unbraced if statements into a one-liner
# 'if(b)\n i++;' => 'if(b) i++;'.
nl_create_if_one_liner          = true     # false/true

# Change simple unbraced for statements into a one-liner
# 'for (i=0;i<5;i++)\n foo(i);' => 'for (i=0;i<5;i++) foo(i);'.
nl_create_for_one_liner         = true     # false/true

# Change simple unbraced while statements into a one-liner
# 'while (i<5)\n foo(i++);' => 'while (i<5) foo(i++);'.
nl_create_while_one_liner       = true     # false/true

#
# Blank line options
#

# The maximum consecutive newlines (3 = 2 blank lines).
nl_max                          = 3        # unsigned number

# The number of newlines after '}' of a multi-line function body.
nl_after_func_body              = 2        # unsigned number

# The number of newlines after '}' of a multi-line function body in a class declaration.
nl_after_func_body_class        = 2        # unsigned number

# The number of newlines after '}' of a single line function body.
nl_after_func_body_one_liner    = 2        # unsigned number

# The minimum number of newlines before a multi-line comment.
# Doesn't apply if after a brace open or another multi-line comment.
nl_before_block_comment         = 2        # unsigned number

# Whether to force a newline after a multi-line comment.
nl_after_multiline_comment      = true     # false/true

# Whether to force a newline after a label's colon.
nl_after_label_colon            = true     # false/true

# The number of newlines between a function def and the function comment.
# 0 = No change.
nl_comment_func_def             = 1        # unsigned number

# The number of newlines after a try-catch-finally block that isn't followed by a brace close.
# 0 = No change.
nl_after_try_catch_finally      = 1        # unsigned number

# Whether to remove blank lines after '{'.
eat_blanks_after_open_brace     = true     # false/true

# Whether to remove blank lines before '}'.
eat_blanks_before_close_brace   = true     # false/true

#
# Positioning options
#

# The position of arithmetic operators in wrapped expressions.
pos_arith                       = lead     # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of assignment in wrapped expressions.
# Do not affect '=' followed by '{'.
pos_assign                      = trail    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of boolean operators in wrapped expressions.
pos_bool                        = lead     # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of comparison operators in wrapped expressions.
pos_compare                     = lead     # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of conditional (b ? t : f) operators in wrapped expressions.
pos_conditional                 = lead     # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of the comma in wrapped expressions.
pos_comma                       = trail    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of the comma in enum entries.
pos_enum_comma                  = trail    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of the comma in the base class list if there are more than one line,
#   (tied to nl_class_init_args).
pos_class_comma                 = trail    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of the comma in the constructor initialization list.
# Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon.
pos_constr_comma                = trail    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of trailing/leading class colon, between class and base class list
#   (tied to nl_class_colon).
pos_class_colon                 = trail    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of colons between constructor and member initialization,
# (tied to nl_constr_colon).
# Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma.
pos_constr_colon                = lead     # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force

#
# Line Splitting options
#

# Try to limit code width to N number of columns
code_width                      = 80       # unsigned number

# Whether to fully split long 'for' statements at semi-colons.
ls_for_split_full               = true     # false/true

#
# Code alignment (not left column spaces/tabs)
#

# The span for aligning comments that end lines (0=don't align)
align_right_cmt_span            = 1        # unsigned number

# The minimum space between label and value of a preprocessor define.
align_pp_define_gap             = 4        # unsigned number

# The span for aligning on '#define' bodies (0=don't align, other=number of lines including comments between blocks)
align_pp_define_span            = 4        # unsigned number

#
# Comment modifications
#

# Try to wrap comments at cmt_width columns
cmt_width                       = 100      # unsigned number

# Whether to put a star on subsequent comment lines.
cmt_star_cont                   = true     # false/true

#
# Code modifying options (non-whitespace)
#

# Add or remove braces on single-line 'do' statement.
mod_full_brace_do               = remove   # ignore/add/remove/force

# Add or remove braces on single-line 'for' statement.
mod_full_brace_for              = remove   # ignore/add/remove/force

# Add or remove braces on single-line 'if' statement. Will not remove the braces if they contain an 'else'.
mod_full_brace_if               = remove   # ignore/add/remove/force

# Don't remove braces around statements that span N newlines
mod_full_brace_nl               = 1        # unsigned number

# Add or remove braces on single-line 'while' statement.
mod_full_brace_while            = remove   # ignore/add/remove/force

# Add or remove unnecessary paren on 'return' statement.
mod_paren_on_return             = remove   # ignore/add/remove/force

# If a namespace body exceeds the specified number of newlines and doesn't have a comment after
# the close brace, a comment will be added.
mod_add_long_namespace_closebrace_comment = 1        # unsigned number

# If an #ifdef body exceeds the specified number of newlines and doesn't have a comment after
# the #endif, a comment will be added.
mod_add_long_ifdef_endif_comment = 1        # unsigned number

# If an #ifdef or #else body exceeds the specified number of newlines and doesn't have a comment after
# the #else, a comment will be added.
mod_add_long_ifdef_else_comment = 1        # unsigned number

# If True, will sort consecutive single-line 'import' statements [Java, D].
mod_sort_import                 = true     # false/true

# If True, will sort consecutive single-line 'using' statements [C#].
mod_sort_using                  = true     # false/true

# If True, it will move a 'break' that appears after a fully braced 'case' before the close brace.
mod_move_case_break             = true     # false/true

# If True, it will remove a void 'return;' that appears as the last statement in a function.
mod_remove_empty_return         = true     # false/true

#
# Preprocessor options
#

# Add or remove space after # based on pp_level of #if blocks.
pp_space                        = force    # ignore/add/remove/force

# Meaning of the settings:
#   Ignore - do not do any changes
#   Add    - makes sure there is 1 or more space/brace/newline/etc
#   Force  - makes sure there is exactly 1 space/brace/newline/etc,
#            behaves like Add in some contexts
#   Remove - removes space/brace/newline/etc
#
#
# - Token(s) can be treated as specific type(s) with the 'set' option:
#     `set tokenType tokenString [tokenString...]`
#
#     Example:
#       `set BOOL __AND__ __OR__`
#
#     tokenTypes are defined in src/token_enum.h, use them without the
#     'CT_' prefix: 'CT_BOOL' -> 'BOOL'
#
#
# - Token(s) can be treated as type(s) with the 'type' option.
#     `type tokenString [tokenString...]`
#
#     Example:
#       `type int c_uint_8 Rectangle`
#
#     This can also be achieved with `set TYPE int c_uint_8 Rectangle`
#
#
# To embed whitespace in tokenStrings use the '\' escape character, or quote
# the tokenStrings. These quotes are supported: "'`
#
#
# - Support for the auto detection of languages through the file ending can be
#   added using the 'file_ext' command.
#     `file_ext langType langString [langString..]`
#
#     Example:
#       `file_ext CPP .ch .cxx .cpp.in`
#
#     langTypes are defined in uncrusify_types.h in the lang_flag_e enum, use
#     them without the 'LANG_' prefix: 'LANG_CPP' -> 'CPP'
#
#
# - Custom macro-based indentation can be set up using 'macro-open',
#   'macro-else' and 'macro-close'.
#     `(macro-open | macro-else | macro-close) tokenString`
#
#     Example:
#       `macro-open  BEGIN_TEMPLATE_MESSAGE_MAP`
#       `macro-open  BEGIN_MESSAGE_MAP`
#       `macro-close END_MESSAGE_MAP`
#
## option(s) with 'not default' value: 209
#
